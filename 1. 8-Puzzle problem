import heapq

class PuzzleState:
    def __init__(self, board, g, previous=None):
        self.board = board
        self.g = g
        self.previous = previous
        self.blank_position = self.find_blank_position()
        self.h = self.heuristic()
        self.f = self.g + self.h

    def find_blank_position(self):
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    return (i, j)
        return None

    def heuristic(self):
        """Calculate Manhattan distance as heuristic"""
        distance = 0
        for i in range(3):
            for j in range(3):
                value = self.board[i][j]
                if value != 0:
                    target_x = (value - 1) // 3
                    target_y = (value - 1) % 3
                    distance += abs(target_x - i) + abs(target_y - j)
        return distance

    def is_goal(self):
        goal = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
        return self.board == goal

    def generate_successors(self):
        successors = []
        x, y = self.blank_position
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right

        for dx, dy in directions:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                new_board = [row[:] for row in self.board]
                new_board[x][y], new_board[new_x][new_y] = new_board[new_x][new_y], new_board[x][y]
                successors.append(PuzzleState(new_board, self.g + 1, self))

        return successors

    def __lt__(self, other):
        return self.f < other.f

    def __eq__(self, other):
        return self.board == other.board

    def __hash__(self):
        return hash(str(self.board))

def a_star_search(initial_board):
    open_set = []
    closed_set = set()
    initial_state = PuzzleState(initial_board, 0)
    heapq.heappush(open_set, initial_state)

    while open_set:
        current_state = heapq.heappop(open_set)

        if current_state.is_goal():
            return current_state

        closed_set.add(current_state)

        for successor in current_state.generate_successors():
            if successor not in closed_set:
                heapq.heappush(open_set, successor)

    return None

def print_solution(solution_state):
    path = []
    current_state = solution_state

    while current_state:
        path.append(current_state.board)
        current_state = current_state.previous

    path.reverse()
    for step in path:
        for row in step:
            print(row)
        print()

if __name__ == "__main__":
    initial_board = [
        [1, 2, 3],
        [4, 0, 6],
        [7, 5, 8]
    ]

    solution = a_star_search(initial_board)
    if solution:
        print("Solution found:")
        print_solution(solution)
    else:
        print("No solution exists.")
